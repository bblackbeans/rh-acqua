/**
 * Sistema de M√°scaras Progressivo - RH Acqua
 * Aplica m√°scaras durante a digita√ß√£o, n√£o apenas quando completo
 */

console.log('üé≠ Sistema de m√°scaras progressivo carregado!');

// Fun√ß√£o para aplicar m√°scara de PIS progressivamente
function applyPISMask(input) {
    let value = input.value.replace(/\D/g, '');
    let cursorPos = input.selectionStart;
    
    // Aplicar m√°scara progressivamente
    let maskedValue = '';
    for (let i = 0; i < value.length && i < 11; i++) {
        if (i === 3) maskedValue += '.';
        if (i === 8) maskedValue += '.';
        if (i === 10) maskedValue += '-';
        maskedValue += value[i];
    }
    
    input.value = maskedValue;
    
    // Ajustar posi√ß√£o do cursor
    if (cursorPos <= 3) {
        input.setSelectionRange(cursorPos, cursorPos);
    } else if (cursorPos <= 8) {
        input.setSelectionRange(cursorPos + 1, cursorPos + 1);
    } else if (cursorPos <= 10) {
        input.setSelectionRange(cursorPos + 2, cursorPos + 2);
    } else {
        input.setSelectionRange(cursorPos + 3, cursorPos + 3);
    }
    
    console.log('‚úÖ M√°scara PIS aplicada progressivamente:', maskedValue);
}

// Fun√ß√£o para aplicar m√°scara de CPF progressivamente
function applyCPFMask(input) {
    let value = input.value.replace(/\D/g, '');
    let cursorPos = input.selectionStart;
    
    // Aplicar m√°scara progressivamente
    let maskedValue = '';
    for (let i = 0; i < value.length && i < 11; i++) {
        if (i === 3) maskedValue += '.';
        if (i === 6) maskedValue += '.';
        if (i === 9) maskedValue += '-';
        maskedValue += value[i];
    }
    
    input.value = maskedValue;
    
    // Ajustar posi√ß√£o do cursor
    if (cursorPos <= 3) {
        input.setSelectionRange(cursorPos, cursorPos);
    } else if (cursorPos <= 6) {
        input.setSelectionRange(cursorPos + 1, cursorPos + 1);
    } else if (cursorPos <= 9) {
        input.setSelectionRange(cursorPos + 2, cursorPos + 2);
    } else {
        input.setSelectionRange(cursorPos + 3, cursorPos + 3);
    }
    
    console.log('‚úÖ M√°scara CPF aplicada progressivamente:', maskedValue);
}

// Fun√ß√£o para aplicar m√°scara de RG progressivamente
function applyRGMask(input) {
    let value = input.value.replace(/\D/g, '');
    let cursorPos = input.selectionStart;
    
    // Aplicar m√°scara progressivamente
    let maskedValue = '';
    for (let i = 0; i < value.length && i < 9; i++) {
        if (i === 2) maskedValue += '.';
        if (i === 5) maskedValue += '.';
        if (i === 8) maskedValue += '-';
        maskedValue += value[i];
    }
    
    input.value = maskedValue;
    
    // Ajustar posi√ß√£o do cursor
    if (cursorPos <= 2) {
        input.setSelectionRange(cursorPos, cursorPos);
    } else if (cursorPos <= 5) {
        input.setSelectionRange(cursorPos + 1, cursorPos + 1);
    } else if (cursorPos <= 8) {
        input.setSelectionRange(cursorPos + 2, cursorPos + 2);
    } else {
        input.setSelectionRange(cursorPos + 3, cursorPos + 3);
    }
    
    console.log('‚úÖ M√°scara RG aplicada progressivamente:', maskedValue);
}

// Fun√ß√£o para aplicar m√°scara de telefone progressivamente
function applyPhoneMask(input) {
    let value = input.value.replace(/\D/g, '');
    let cursorPos = input.selectionStart;
    
    // Aplicar m√°scara progressivamente
    let maskedValue = '';
    
    if (value.length > 0) {
        maskedValue += '(';
        
        for (let i = 0; i < value.length && i < 11; i++) {
            if (i === 2) {
                maskedValue += ') ';
            }
            maskedValue += value[i];
            
            // Adicionar h√≠fen baseado no comprimento
            if (value.length === 11 && i === 6) {
                maskedValue += '-';
            } else if (value.length === 10 && i === 5) {
                maskedValue += '-';
            }
        }
    }
    
    input.value = maskedValue;
    
    // Ajustar posi√ß√£o do cursor de forma mais precisa
    let newPos = cursorPos;
    
    // Se estamos digitando os primeiros 2 d√≠gitos (DDD)
    if (cursorPos <= 2) {
        newPos = cursorPos + 1; // +1 para o par√™ntese de abertura
    }
    // Se estamos digitando ap√≥s o DDD (posi√ß√£o 3-4)
    else if (cursorPos <= 4) {
        newPos = cursorPos + 2; // +2 para par√™ntese e espa√ßo
    }
    // Se estamos digitando o resto do n√∫mero
    else {
        // Contar quantos caracteres de formata√ß√£o j√° foram adicionados
        let formatChars = 0;
        if (value.length >= 2) formatChars += 3; // (XX) 
        if (value.length === 11 && cursorPos > 6) formatChars += 1; // h√≠fen
        if (value.length === 10 && cursorPos > 5) formatChars += 1; // h√≠fen
        
        newPos = cursorPos + formatChars;
    }
    
    // Garantir que a posi√ß√£o n√£o exceda o comprimento do valor
    newPos = Math.min(newPos, maskedValue.length);
    
    input.setSelectionRange(newPos, newPos);
    
    console.log('‚úÖ M√°scara Telefone aplicada progressivamente:', maskedValue);
}

// Fun√ß√£o para aplicar m√°scara de CEP progressivamente
function applyCEPMask(input) {
    let value = input.value.replace(/\D/g, '');
    let cursorPos = input.selectionStart;
    
    // Aplicar m√°scara progressivamente
    let maskedValue = '';
    for (let i = 0; i < value.length && i < 8; i++) {
        if (i === 5) maskedValue += '-';
        maskedValue += value[i];
    }
    
    input.value = maskedValue;
    
    // Ajustar posi√ß√£o do cursor
    if (cursorPos <= 5) {
        input.setSelectionRange(cursorPos, cursorPos);
    } else {
        input.setSelectionRange(cursorPos + 1, cursorPos + 1);
    }
    
    console.log('‚úÖ M√°scara CEP aplicada progressivamente:', maskedValue);
}

// Fun√ß√£o para configurar m√°scaras em um campo
function setupMask(field, maskFunction, maskName) {
    if (field.dataset.maskApplied) {
        return; // J√° foi configurado
    }
    
    console.log(`üîß Configurando m√°scara ${maskName} para campo:`, field.name);
    
    // Remover listeners existentes para evitar duplica√ß√£o
    field.removeEventListener('input', maskFunction);
    field.removeEventListener('keydown', handleKeydown);
    
    // Adicionar novos listeners
    field.addEventListener('input', function(e) {
        console.log(`‚å®Ô∏è Input detectado no campo ${maskName}`);
        maskFunction(this);
    });
    
    // Listener para teclas especiais (backspace, delete, etc.)
    field.addEventListener('keydown', function(e) {
        handleKeydown(e, this, maskFunction);
    });
    
    // Marcar como configurado
    field.dataset.maskApplied = 'true';
    
    console.log(`‚úÖ M√°scara ${maskName} configurada para:`, field.name);
}

// Fun√ß√£o para lidar com teclas especiais
function handleKeydown(e, field, maskFunction) {
    if (e.key === 'Backspace' || e.key === 'Delete') {
        // Permitir backspace/delete funcionar normalmente
        return true;
    }
    
    // Permitir apenas n√∫meros
    if (!/\d/.test(e.key) && !['Tab', 'Enter', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key)) {
        e.preventDefault();
        return false;
    }
}

// Fun√ß√£o principal para aplicar m√°scaras
function applyMasks() {
    console.log('üéØ Aplicando m√°scaras progressivas aos campos...');
    
    // PIS
    const pisFields = document.querySelectorAll('.pis-mask');
    console.log(`üîç Encontrados ${pisFields.length} campos PIS`);
    pisFields.forEach(field => setupMask(field, applyPISMask, 'PIS'));
    
    // CPF
    const cpfFields = document.querySelectorAll('.cpf-mask');
    console.log(`üîç Encontrados ${cpfFields.length} campos CPF`);
    cpfFields.forEach(field => setupMask(field, applyCPFMask, 'CPF'));
    
    // RG
    const rgFields = document.querySelectorAll('.rg-mask');
    console.log(`üîç Encontrados ${rgFields.length} campos RG`);
    rgFields.forEach(field => setupMask(field, applyRGMask, 'RG'));
    
    // Telefone
    const phoneFields = document.querySelectorAll('.phone-mask');
    console.log(`üîç Encontrados ${phoneFields.length} campos Telefone`);
    phoneFields.forEach(field => setupMask(field, applyPhoneMask, 'Telefone'));
    
    // CEP
    const cepFields = document.querySelectorAll('.cep-mask');
    console.log(`üîç Encontrados ${cepFields.length} campos CEP`);
    cepFields.forEach(field => setupMask(field, applyCEPMask, 'CEP'));
    
    console.log('üéØ Aplica√ß√£o de m√°scaras progressivas conclu√≠da!');
}

// Fun√ß√£o para inicializar
function initMasks() {
    console.log('üöÄ Inicializando sistema de m√°scaras progressivas...');
    
    // Aplicar m√°scaras imediatamente
    applyMasks();
    
    // Configurar MutationObserver para campos din√¢micos
    const observer = new MutationObserver(function(mutations) {
        let shouldReapply = false;
        
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                // Verificar se foram adicionados novos campos
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        if (node.querySelector && node.querySelector('.pis-mask, .cpf-mask, .rg-mask, .phone-mask, .cep-mask')) {
                            shouldReapply = true;
                        }
                        if (node.classList && node.classList.contains('pis-mask')) {
                            shouldReapply = true;
                        }
                    }
                });
            }
        });
        
        if (shouldReapply) {
            console.log('üîÑ Novos campos detectados, reaplicando m√°scaras...');
            setTimeout(applyMasks, 100);
        }
    });
    
    // Iniciar observa√ß√£o
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    console.log('üëÅÔ∏è Observer configurado para detectar novos campos');
}

// Evitar execu√ß√£o m√∫ltipla
let masksInitialized = false;

function initMasksOnce() {
    if (masksInitialized) {
        console.log('üé≠ M√°scaras j√° foram inicializadas, pulando...');
        return;
    }
    masksInitialized = true;
    initMasks();
}

// Inicializar quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMasksOnce);
} else {
    // DOM j√° est√° pronto
    initMasksOnce();
}

console.log('üé≠ Sistema de m√°scaras progressivas configurado!'); 
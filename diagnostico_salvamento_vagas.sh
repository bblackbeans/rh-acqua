#!/bin/bash

echo "üîç DIAGN√ìSTICO DE SALVAMENTO DE VAGAS"
echo "====================================="

echo ""
echo "1Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES ATUAIS"
echo "==================================="

# Verificar arquivo .env
if [ -f ".env" ]; then
    echo "‚úÖ Arquivo .env encontrado"
    echo ""
    echo "üìã Configura√ß√µes relevantes:"
    echo "CSRF_TRUSTED_ORIGINS:"
    grep "CSRF_TRUSTED_ORIGINS" .env
    echo ""
    echo "CSRF_COOKIE_SECURE:"
    grep "CSRF_COOKIE_SECURE" .env
    echo ""
    echo "DEBUG:"
    grep "DEBUG" .env
else
    echo "‚ùå Arquivo .env n√£o encontrado!"
fi

echo ""
echo "2Ô∏è‚É£ TESTANDO CONECTIVIDADE DO SITE"
echo "================================="

echo "üåê Testando acesso ao site..."
response=$(curl -s -o /dev/null -w "%{http_code}" https://rh.institutoacqua.org.br/)
echo "Status HTTP: $response"

if [ "$response" = "200" ] || [ "$response" = "302" ]; then
    echo "‚úÖ Site est√° acess√≠vel"
else
    echo "‚ùå Problema de conectividade"
fi

echo ""
echo "3Ô∏è‚É£ VERIFICANDO CONTAINERS DOCKER"
echo "================================"

if command -v docker &> /dev/null; then
    echo "üìã Containers relacionados ao projeto:"
    sudo docker ps --filter "name=rh-acqua" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "‚ùå Erro ao listar containers"
    
    echo ""
    echo "üìã Logs recentes do container web (√∫ltimas 30 linhas):"
    web_container=$(sudo docker ps --filter "name=rh-acqua" --format "{{.Names}}" | grep web | head -1)
    if [ ! -z "$web_container" ]; then
        echo "Container encontrado: $web_container"
        sudo docker logs --tail 30 $web_container 2>/dev/null || echo "‚ùå Erro ao obter logs"
    else
        echo "‚ö†Ô∏è Container web n√£o encontrado"
    fi
else
    echo "‚ùå Docker n√£o encontrado"
fi

echo ""
echo "4Ô∏è‚É£ TESTANDO FORMUL√ÅRIO DE VAGA"
echo "=============================="

echo "üîç Verificando se o formul√°rio est√° acess√≠vel..."
form_response=$(curl -s -o /dev/null -w "%{http_code}" https://rh.institutoacqua.org.br/vacancies/create/)
echo "Status do formul√°rio: $form_response"

if [ "$form_response" = "200" ] || [ "$form_response" = "302" ]; then
    echo "‚úÖ Formul√°rio de cria√ß√£o de vaga est√° acess√≠vel"
else
    echo "‚ùå Problema ao acessar formul√°rio de cria√ß√£o de vaga"
fi

echo ""
echo "5Ô∏è‚É£ VERIFICANDO CSRF TOKEN"
echo "========================="

echo "üîç Verificando se o CSRF token est√° sendo gerado..."
csrf_response=$(curl -s https://rh.institutoacqua.org.br/vacancies/create/ | grep -o 'name="csrfmiddlewaretoken" value="[^"]*"' | head -1)
if [ ! -z "$csrf_response" ]; then
    echo "‚úÖ CSRF token encontrado no formul√°rio"
    echo "Token: $csrf_response"
else
    echo "‚ùå CSRF token n√£o encontrado no formul√°rio"
fi

echo ""
echo "6Ô∏è‚É£ TESTE DE POST SIMULADO"
echo "========================="

echo "üîç Testando envio de dados para o formul√°rio..."

# Obter CSRF token
csrf_token=$(curl -s https://rh.institutoacqua.org.br/vacancies/create/ | grep -o 'name="csrfmiddlewaretoken" value="[^"]*"' | sed 's/name="csrfmiddlewaretoken" value="\([^"]*\)"/\1/')

if [ ! -z "$csrf_token" ]; then
    echo "CSRF Token obtido: $csrf_token"
    
    # Simular POST com dados m√≠nimos
    post_response=$(curl -s -o /dev/null -w "%{http_code}" \
        -X POST \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "Referer: https://rh.institutoacqua.org.br/vacancies/create/" \
        -d "csrfmiddlewaretoken=$csrf_token&title=Teste&description=Teste&requirements=Teste&hospital=1&department=1&location=Teste" \
        https://rh.institutoacqua.org.br/vacancies/create/)
    
    echo "Status do POST: $post_response"
    
    if [ "$post_response" = "200" ] || [ "$post_response" = "302" ]; then
        echo "‚úÖ POST funcionou (pode ser redirecionamento de login)"
    elif [ "$post_response" = "403" ]; then
        echo "‚ùå Erro 403 - Problema de CSRF ou permiss√£o"
    elif [ "$post_response" = "400" ]; then
        echo "‚ö†Ô∏è Erro 400 - Problema de valida√ß√£o de dados"
    else
        echo "‚ùì Status inesperado: $post_response"
    fi
else
    echo "‚ùå N√£o foi poss√≠vel obter CSRF token"
fi

echo ""
echo "7Ô∏è‚É£ POSS√çVEIS CAUSAS DO PROBLEMA"
echo "==============================="

echo "üîç Baseado no diagn√≥stico, as poss√≠veis causas s√£o:"
echo ""
echo "1. ‚ùå Problema de permiss√£o do usu√°rio"
echo "   - Usu√°rio n√£o tem role de recrutador"
echo "   - Usu√°rio n√£o est√° logado corretamente"
echo ""
echo "2. ‚ùå Problema de valida√ß√£o do formul√°rio"
echo "   - Campos obrigat√≥rios n√£o preenchidos"
echo "   - Dados inv√°lidos sendo enviados"
echo ""
echo "3. ‚ùå Problema de banco de dados"
echo "   - Conex√£o com banco n√£o est√° funcionando"
echo "   - Tabelas n√£o existem ou t√™m problemas"
echo ""
echo "4. ‚ùå Problema de configura√ß√£o do Django"
echo "   - Configura√ß√µes de produ√ß√£o incorretas"
echo "   - Middleware bloqueando requisi√ß√µes"
echo ""

echo "8Ô∏è‚É£ PR√ìXIMOS PASSOS"
echo "=================="

echo "üéØ Para resolver o problema:"
echo ""
echo "1. Verifique se est√° logado como recrutador"
echo "2. Teste com dados v√°lidos e completos"
echo "3. Verifique os logs do container Django"
echo "4. Teste em ambiente local para comparar"
echo ""

echo "üìù Para obter mais detalhes:"
echo "sudo docker logs <container_name> | tail -50"
echo ""

echo "‚úÖ Diagn√≥stico conclu√≠do!"

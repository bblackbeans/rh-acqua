# Generated by Django 4.2.7 on 2025-09-15 19:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome identificador do template', max_length=100, verbose_name='Nome do Template')),
                ('trigger_type', models.CharField(choices=[('user_registration', 'Cadastro de Usuário'), ('application_submitted', 'Candidatura Realizada'), ('application_reviewed', 'Candidatura Analisada'), ('interview_scheduled', 'Entrevista Agendada'), ('application_approved', 'Candidatura Aprovada'), ('application_rejected', 'Candidatura Rejeitada'), ('password_reset', 'Redefinição de Senha'), ('welcome', 'Boas-vindas'), ('custom', 'Personalizado')], help_text='Tipo de evento que dispara este email', max_length=50, verbose_name='Tipo de Gatilho')),
                ('subject', models.CharField(help_text='Assunto do email (pode usar variáveis como {{user_name}})', max_length=255, verbose_name='Assunto')),
                ('html_content', models.TextField(help_text='Conteúdo HTML do email (pode usar variáveis como {{user_name}})', verbose_name='Conteúdo HTML')),
                ('text_content', models.TextField(blank=True, help_text='Conteúdo em texto simples (opcional)', null=True, verbose_name='Conteúdo Texto')),
                ('variables', models.JSONField(blank=True, default=dict, help_text='Lista de variáveis que podem ser usadas no template', verbose_name='Variáveis Disponíveis')),
                ('is_active', models.BooleanField(default=True, help_text='Se este template está ativo', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
            ],
            options={
                'verbose_name': 'Template de Email',
                'verbose_name_plural': 'Templates de Email',
                'ordering': ['trigger_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SMTPConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome identificador para esta configuração SMTP', max_length=100, verbose_name='Nome da Configuração')),
                ('host', models.CharField(help_text='Endereço do servidor SMTP (ex: smtp.gmail.com)', max_length=255, verbose_name='Servidor SMTP')),
                ('port', models.PositiveIntegerField(default=587, help_text='Porta do servidor SMTP (587 para TLS, 465 para SSL)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Porta')),
                ('use_tls', models.BooleanField(default=True, help_text='Usar TLS para conexão segura', verbose_name='Usar TLS')),
                ('use_ssl', models.BooleanField(default=False, help_text='Usar SSL para conexão segura', verbose_name='Usar SSL')),
                ('username', models.CharField(help_text='Nome de usuário para autenticação SMTP', max_length=255, verbose_name='Usuário')),
                ('password', models.CharField(help_text='Senha para autenticação SMTP', max_length=255, verbose_name='Senha')),
                ('from_email', models.EmailField(help_text='Email que aparecerá como remetente', max_length=254, verbose_name='Email Remetente')),
                ('from_name', models.CharField(help_text='Nome que aparecerá como remetente', max_length=255, verbose_name='Nome do Remetente')),
                ('is_active', models.BooleanField(default=True, help_text='Se esta configuração está ativa', verbose_name='Ativo')),
                ('is_default', models.BooleanField(default=False, help_text='Se esta é a configuração padrão do sistema', verbose_name='Configuração Padrão')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
            ],
            options={
                'verbose_name': 'Configuração SMTP',
                'verbose_name_plural': 'Configurações SMTP',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome identificador do gatilho', max_length=100, verbose_name='Nome do Gatilho')),
                ('trigger_type', models.CharField(choices=[('user_registration', 'Cadastro de Usuário'), ('application_submitted', 'Candidatura Realizada'), ('application_reviewed', 'Candidatura Analisada'), ('interview_scheduled', 'Entrevista Agendada'), ('application_approved', 'Candidatura Aprovada'), ('application_rejected', 'Candidatura Rejeitada'), ('password_reset', 'Redefinição de Senha'), ('welcome', 'Boas-vindas'), ('custom', 'Personalizado')], help_text='Tipo de evento que dispara este gatilho', max_length=50, verbose_name='Tipo de Gatilho')),
                ('is_active', models.BooleanField(default=True, help_text='Se este gatilho está ativo', verbose_name='Ativo')),
                ('priority', models.IntegerField(choices=[(1, 'Baixa'), (2, 'Normal'), (3, 'Alta'), (4, 'Urgente')], default=2, help_text='Prioridade do email na fila', verbose_name='Prioridade')),
                ('delay_minutes', models.PositiveIntegerField(default=0, help_text='Atraso em minutos antes de enviar o email', verbose_name='Atraso (minutos)')),
                ('conditions', models.JSONField(blank=True, default=dict, help_text='Condições adicionais para envio do email', verbose_name='Condições')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('smtp_config', models.ForeignKey(help_text='Configuração SMTP a ser usada', on_delete=django.db.models.deletion.CASCADE, to='email_system.smtpconfiguration', verbose_name='Configuração SMTP')),
                ('template', models.ForeignKey(help_text='Template de email a ser usado', on_delete=django.db.models.deletion.CASCADE, to='email_system.emailtemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Gatilho de Email',
                'verbose_name_plural': 'Gatilhos de Email',
                'ordering': ['-priority', 'trigger_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_email', models.EmailField(help_text='Email do destinatário', max_length=254, verbose_name='Email Destinatário')),
                ('to_name', models.CharField(blank=True, help_text='Nome do destinatário', max_length=255, null=True, verbose_name='Nome do Destinatário')),
                ('subject', models.CharField(help_text='Assunto do email', max_length=255, verbose_name='Assunto')),
                ('html_content', models.TextField(help_text='Conteúdo HTML do email', verbose_name='Conteúdo HTML')),
                ('text_content', models.TextField(blank=True, help_text='Conteúdo em texto simples', null=True, verbose_name='Conteúdo Texto')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Dados usados para renderizar o template', verbose_name='Dados de Contexto')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('processing', 'Processando'), ('sent', 'Enviado'), ('failed', 'Falhou'), ('cancelled', 'Cancelado')], default='pending', help_text='Status atual do email', max_length=20, verbose_name='Status')),
                ('priority', models.IntegerField(choices=[(1, 'Baixa'), (2, 'Normal'), (3, 'Alta'), (4, 'Urgente')], default=2, help_text='Prioridade do email', verbose_name='Prioridade')),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data e hora agendada para envio', verbose_name='Agendado para')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Data e hora em que foi enviado', null=True, verbose_name='Enviado em')),
                ('error_message', models.TextField(blank=True, help_text='Mensagem de erro em caso de falha', null=True, verbose_name='Mensagem de Erro')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Número de tentativas de envio', verbose_name='Tentativas')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Número máximo de tentativas', verbose_name='Máximo de Tentativas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('trigger', models.ForeignKey(help_text='Gatilho que gerou este email', on_delete=django.db.models.deletion.CASCADE, to='email_system.emailtrigger', verbose_name='Gatilho')),
            ],
            options={
                'verbose_name': 'Email na Fila',
                'verbose_name_plural': 'Fila de Emails',
                'ordering': ['-priority', 'scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_email', models.EmailField(help_text='Email do destinatário', max_length=254, verbose_name='Email Destinatário')),
                ('to_name', models.CharField(blank=True, help_text='Nome do destinatário', max_length=255, null=True, verbose_name='Nome do Destinatário')),
                ('subject', models.CharField(help_text='Assunto do email', max_length=255, verbose_name='Assunto')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('processing', 'Processando'), ('sent', 'Enviado'), ('failed', 'Falhou'), ('cancelled', 'Cancelado')], help_text='Status final do email', max_length=20, verbose_name='Status')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Data e hora em que foi enviado', null=True, verbose_name='Enviado em')),
                ('error_message', models.TextField(blank=True, help_text='Mensagem de erro em caso de falha', null=True, verbose_name='Mensagem de Erro')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Número de tentativas realizadas', verbose_name='Tentativas')),
                ('processing_time', models.FloatField(blank=True, help_text='Tempo em segundos para processar o email', null=True, verbose_name='Tempo de Processamento (s)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('email_queue', models.ForeignKey(help_text='Email da fila que gerou este log', on_delete=django.db.models.deletion.CASCADE, to='email_system.emailqueue', verbose_name='Email da Fila')),
                ('smtp_config', models.ForeignKey(blank=True, help_text='Configuração SMTP usada', null=True, on_delete=django.db.models.deletion.SET_NULL, to='email_system.smtpconfiguration', verbose_name='Configuração SMTP')),
                ('trigger', models.ForeignKey(help_text='Gatilho que gerou o email', on_delete=django.db.models.deletion.CASCADE, to='email_system.emailtrigger', verbose_name='Gatilho')),
            ],
            options={
                'verbose_name': 'Log de Email',
                'verbose_name_plural': 'Logs de Email',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='emailqueue',
            index=models.Index(fields=['status', 'scheduled_at'], name='email_syste_status_d6aa84_idx'),
        ),
        migrations.AddIndex(
            model_name='emailqueue',
            index=models.Index(fields=['priority', 'scheduled_at'], name='email_syste_priorit_3c38e6_idx'),
        ),
        migrations.AddIndex(
            model_name='emaillog',
            index=models.Index(fields=['status', 'created_at'], name='email_syste_status_eabb42_idx'),
        ),
        migrations.AddIndex(
            model_name='emaillog',
            index=models.Index(fields=['to_email', 'created_at'], name='email_syste_to_emai_40025e_idx'),
        ),
        migrations.AddIndex(
            model_name='emaillog',
            index=models.Index(fields=['trigger', 'created_at'], name='email_syste_trigger_415794_idx'),
        ),
    ]

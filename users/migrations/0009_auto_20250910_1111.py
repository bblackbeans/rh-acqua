# Generated by Django 4.2.16 on 2025-09-10 14:11

from django.db import migrations, connection

def map_user_ids_from_auth_user(apps, schema_editor):
    """
    Mapeia user_id das tabelas do currículo de auth_user.id para users_user.id 
    baseado no email correspondente.
    """
    cursor = connection.cursor()
    
    # Tabelas que precisam de mapeamento
    tables_to_map = [
        'users_education',
        'users_experience', 
        'users_technicalskill',
        'users_softskill',
        'users_certification',
        'users_language'
    ]
    
    for table in tables_to_map:
        try:
            # Mapear user_id baseado no email
            sql = f"""
            UPDATE {table} 
            SET user_id = uu.id
            FROM users_user uu
            JOIN auth_user au ON au.email = uu.email
            WHERE {table}.user_id = au.id
            """
            cursor.execute(sql)
            rows_updated = cursor.rowcount
            print(f"✅ {table}: {rows_updated} registros mapeados")
            
        except Exception as e:
            print(f"❌ Erro ao mapear {table}: {e}")
            # Não queremos que pare a migração por causa de uma tabela


def reverse_map_user_ids(apps, schema_editor):
    """
    Reversa: mapeia de volta para auth_user.id baseado no email
    """
    cursor = connection.cursor()
    
    tables_to_map = [
        'users_education',
        'users_experience', 
        'users_technicalskill',
        'users_softskill',
        'users_certification',
        'users_language'
    ]
    
    for table in tables_to_map:
        try:
            # Mapear de volta para auth_user baseado no email
            sql = f"""
            UPDATE {table} 
            SET user_id = au.id
            FROM auth_user au
            JOIN users_user uu ON uu.email = au.email
            WHERE {table}.user_id = uu.id
            """
            cursor.execute(sql)
            rows_updated = cursor.rowcount
            print(f"✅ Reverse {table}: {rows_updated} registros mapeados")
            
        except Exception as e:
            print(f"❌ Erro ao fazer reverse {table}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0008_fix_admin_log'),
    ]

    operations = [
        migrations.RunPython(map_user_ids_from_auth_user, reverse_map_user_ids),
    ]

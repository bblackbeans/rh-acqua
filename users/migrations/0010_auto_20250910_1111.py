# Generated by Django 4.2.16 on 2025-09-10 14:11

from django.db import migrations, connection

def update_fk_constraints(apps, schema_editor):
    """
    Remove constraints FK antigas para auth_user e cria novas para users_user
    """
    cursor = connection.cursor()
    
    # Lista de constraints que precisam ser atualizadas
    constraints_to_update = [
        ('users_education', 'users_education_user_id_f3b8130d_fk_auth_user_id'),
        ('users_experience', 'users_experience_user_id_95e65d3c_fk_auth_user_id'),
        ('users_technicalskill', 'users_technicalskill_user_id_29cf55a2_fk_auth_user_id'),
        ('users_softskill', 'users_softskill_user_id_a6b2b36f_fk_auth_user_id'),
        ('users_certification', 'users_certification_user_id_5b4a801b_fk_auth_user_id'),
        ('users_language', 'users_language_user_id_a8b08ffa_fk_auth_user_id'),
    ]
    
    for table, constraint_name in constraints_to_update:
        try:
            # Drop old constraint
            cursor.execute(f"ALTER TABLE {table} DROP CONSTRAINT IF EXISTS {constraint_name};")
            print(f"✅ Dropped old constraint: {constraint_name}")
            
            # Create new constraint pointing to users_user
            new_constraint_name = constraint_name.replace('_fk_auth_user_id', '_fk_users_user_id')
            cursor.execute(f"""
                ALTER TABLE {table} 
                ADD CONSTRAINT {new_constraint_name} 
                FOREIGN KEY (user_id) REFERENCES users_user(id) DEFERRABLE INITIALLY DEFERRED;
            """)
            print(f"✅ Created new constraint: {new_constraint_name}")
            
        except Exception as e:
            print(f"❌ Erro ao atualizar constraint de {table}: {e}")


def reverse_fk_constraints(apps, schema_editor):
    """
    Reversa: volta constraints para apontar para auth_user
    """
    cursor = connection.cursor()
    
    constraints_to_reverse = [
        ('users_education', 'users_education_user_id_f3b8130d_fk_users_user_id', 'users_education_user_id_f3b8130d_fk_auth_user_id'),
        ('users_experience', 'users_experience_user_id_95e65d3c_fk_users_user_id', 'users_experience_user_id_95e65d3c_fk_auth_user_id'),
        ('users_technicalskill', 'users_technicalskill_user_id_29cf55a2_fk_users_user_id', 'users_technicalskill_user_id_29cf55a2_fk_auth_user_id'),
        ('users_softskill', 'users_softskill_user_id_a6b2b36f_fk_users_user_id', 'users_softskill_user_id_a6b2b36f_fk_auth_user_id'),
        ('users_certification', 'users_certification_user_id_5b4a801b_fk_users_user_id', 'users_certification_user_id_5b4a801b_fk_auth_user_id'),
        ('users_language', 'users_language_user_id_a8b08ffa_fk_users_user_id', 'users_language_user_id_a8b08ffa_fk_auth_user_id'),
    ]
    
    for table, new_constraint, old_constraint in constraints_to_reverse:
        try:
            # Drop new constraint
            cursor.execute(f"ALTER TABLE {table} DROP CONSTRAINT IF EXISTS {new_constraint};")
            
            # Recreate old constraint pointing to auth_user
            cursor.execute(f"""
                ALTER TABLE {table} 
                ADD CONSTRAINT {old_constraint} 
                FOREIGN KEY (user_id) REFERENCES auth_user(id) DEFERRABLE INITIALLY DEFERRED;
            """)
            print(f"✅ Reversed constraint for {table}")
            
        except Exception as e:
            print(f"❌ Erro ao reverter constraint de {table}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0009_auto_20250910_1111'),
    ]

    operations = [
        migrations.RunPython(update_fk_constraints, reverse_fk_constraints),
    ]
